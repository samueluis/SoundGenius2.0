// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoundGenius.Data;

namespace SoundGenius.Migrations
{
    [DbContext(typeof(SoundGeniusDB))]
    partial class SoundGeniusDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SoundGenius.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fotografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SoundGenius.Models.AlbumFaixas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumFK")
                        .HasColumnType("int");

                    b.Property<int>("FaixaFK")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AlbumFK");

                    b.HasIndex("FaixaFK");

                    b.ToTable("AlbumFaixas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AlbumFK = 1,
                            FaixaFK = 1
                        },
                        new
                        {
                            ID = 2,
                            AlbumFK = 2,
                            FaixaFK = 2
                        },
                        new
                        {
                            ID = 3,
                            AlbumFK = 3,
                            FaixaFK = 3
                        },
                        new
                        {
                            ID = 4,
                            AlbumFK = 4,
                            FaixaFK = 4
                        },
                        new
                        {
                            ID = 5,
                            AlbumFK = 5,
                            FaixaFK = 5
                        },
                        new
                        {
                            ID = 6,
                            AlbumFK = 6,
                            FaixaFK = 6
                        },
                        new
                        {
                            ID = 7,
                            AlbumFK = 7,
                            FaixaFK = 7
                        },
                        new
                        {
                            ID = 8,
                            AlbumFK = 8,
                            FaixaFK = 8
                        },
                        new
                        {
                            ID = 9,
                            AlbumFK = 9,
                            FaixaFK = 10
                        },
                        new
                        {
                            ID = 10,
                            AlbumFK = 7,
                            FaixaFK = 9
                        });
                });

            modelBuilder.Entity("SoundGenius.Models.Albuns", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtistaFK")
                        .HasColumnType("int");

                    b.Property<string>("FicheiroImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ArtistaFK");

                    b.ToTable("Albuns");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ArtistaFK = 1,
                            FicheiroImg = "MTV Unplugged.jpg",
                            Genero = "Grunge",
                            Titulo = "MTV Unplugged"
                        },
                        new
                        {
                            ID = 2,
                            ArtistaFK = 1,
                            FicheiroImg = "Bleach.jpg",
                            Genero = "Grunge",
                            Titulo = "Bleach"
                        },
                        new
                        {
                            ID = 3,
                            ArtistaFK = 1,
                            FicheiroImg = "Nevermind.jpg",
                            Genero = "Grunge",
                            Titulo = "Nevermind"
                        },
                        new
                        {
                            ID = 4,
                            ArtistaFK = 2,
                            FicheiroImg = "The color and the shape.jpg",
                            Genero = "Rock Alternativo ",
                            Titulo = "The color and the shape"
                        },
                        new
                        {
                            ID = 5,
                            ArtistaFK = 2,
                            FicheiroImg = "In Your Honor.jpg",
                            Genero = "Rock Alternativo ",
                            Titulo = " In Your Honor"
                        },
                        new
                        {
                            ID = 6,
                            ArtistaFK = 2,
                            FicheiroImg = "Foo Fighters Echoes, Silence, Patience & Grace.jpg",
                            Genero = "Rock Alternativo ",
                            Titulo = "Foo Fighters Echoes, Silence, Patience & Grace"
                        },
                        new
                        {
                            ID = 7,
                            ArtistaFK = 3,
                            FicheiroImg = "Testing.jpg",
                            Genero = "Hip hop",
                            Titulo = "Testing"
                        },
                        new
                        {
                            ID = 8,
                            ArtistaFK = 3,
                            FicheiroImg = "Long. Live. ASAP.jpg",
                            Genero = "Hip hop",
                            Titulo = "Long. Live. ASAP"
                        },
                        new
                        {
                            ID = 9,
                            ArtistaFK = 4,
                            FicheiroImg = "goodbye & good riddance.jpg",
                            Genero = "Hip hop ",
                            Titulo = "goodbye & good riddance"
                        });
                });

            modelBuilder.Entity("SoundGenius.Models.Artista", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FicheiroImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("ID");

                    b.ToTable("Artista");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FicheiroImg = "Nirvana.jpg",
                            Nome = "Nirvana",
                            Sexo = "M"
                        },
                        new
                        {
                            ID = 2,
                            FicheiroImg = "Foo Figthers.jpg",
                            Nome = "Foo Figthers",
                            Sexo = "M"
                        },
                        new
                        {
                            ID = 3,
                            FicheiroImg = "Asap Rocky.jpg",
                            Nome = "Asap Rocky",
                            Sexo = "M"
                        },
                        new
                        {
                            ID = 4,
                            FicheiroImg = "Juice wrld.jpg",
                            Nome = "Juice wrld",
                            Sexo = "M"
                        });
                });

            modelBuilder.Entity("SoundGenius.Models.Faixas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FicheiroImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Faixas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FicheiroImg = "MTV Unplugged.jpg",
                            Genero = "Grunge",
                            Titulo = "The man who sold the word"
                        },
                        new
                        {
                            ID = 2,
                            FicheiroImg = "Bleach.jpg",
                            Genero = "Grunge",
                            Titulo = "About a girl"
                        },
                        new
                        {
                            ID = 3,
                            FicheiroImg = "Nevermind.jpg",
                            Genero = "Grunge",
                            Titulo = "come as you are"
                        },
                        new
                        {
                            ID = 4,
                            FicheiroImg = "The color and the shape.jpg",
                            Genero = "Rock Alternativo",
                            Titulo = "Everlong"
                        },
                        new
                        {
                            ID = 5,
                            FicheiroImg = "In Your Honor.jpg",
                            Genero = "Rock Alternativo",
                            Titulo = "Best of you"
                        },
                        new
                        {
                            ID = 6,
                            FicheiroImg = "The color and the shape.jpg",
                            Genero = "Rock Alternativo",
                            Titulo = "Pretender"
                        },
                        new
                        {
                            ID = 7,
                            FicheiroImg = "Testing.jpg",
                            Genero = "Hip hop",
                            Titulo = "Fukk Sleep"
                        },
                        new
                        {
                            ID = 8,
                            FicheiroImg = "Long. Live. ASAP.jpg",
                            Genero = "Hip hop",
                            Titulo = "PMW"
                        },
                        new
                        {
                            ID = 9,
                            FicheiroImg = "Long. Live. ASAP.jpg",
                            Genero = "Hip hop",
                            Titulo = "lVL"
                        },
                        new
                        {
                            ID = 10,
                            FicheiroImg = "goodbye & good riddance.jpg",
                            Genero = "Hip hop",
                            Titulo = "Wasted"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SoundGenius.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SoundGenius.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundGenius.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SoundGenius.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoundGenius.Models.AlbumFaixas", b =>
                {
                    b.HasOne("SoundGenius.Models.Albuns", "Album")
                        .WithMany("AlbumFaixas")
                        .HasForeignKey("AlbumFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundGenius.Models.Faixas", "Faixa")
                        .WithMany("AlbumFaixas")
                        .HasForeignKey("FaixaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoundGenius.Models.Albuns", b =>
                {
                    b.HasOne("SoundGenius.Models.Artista", "Artista")
                        .WithMany("Albuns")
                        .HasForeignKey("ArtistaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
